@top Program { expression* }

expression {
  value |
  Identifier |
  Application { "(" expression* ")" }
}

// Path { (pathElement ".")* pathElement }

// pathElement { pathElementLiteralNoSpace | pathElementLiteralWithSpace }

value { True | False | Null | Number | String | Object | Array }

String { string }

Object { "{" list<Property>? "}" }
Property { PropertyName ":" value }
PropertyName { string }

Array  { "[" list<value>? "]" }

Identifier { identifierNoEscaping | identifierEscaped}

@tokens {
  @precedence { True, False, Null, Number, identifierNoEscaping }

  identifierNoEscaping { $[a-zA-Z_\-0-9\$]+ }
  identifierEscaped { "`" ![`]+ "`" }
  
  True  { "true" }
  False { "false" }
  Null  { "null" }

  Number { '-'? int frac? exp?  }
  int  { '0' | $[1-9] std.digit* }
  frac { '.' std.digit+ }
  exp  { $[eE] $[+\-]? std.digit+ }

  string { '"' char* '"' }
  char { $[\u{20}\u{21}\u{23}-\u{5b}\u{5d}-\u{10ffff}] | "\\" esc }
  esc  { $["\\\/bfnrt] | "u" hex hex hex hex }
  hex  { $[0-9a-fA-F] }

  whitespace { $[ \n\r\t] }

  "{" "}" "[" "]"
}

@skip { whitespace }

list<item> { item ("," item)* }

@detectDelim
